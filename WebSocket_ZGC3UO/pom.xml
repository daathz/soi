<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>soi.rest</groupId>
  <artifactId>WebSocket_ZGC3UO</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>

  <properties>
    <version.java>13</version.java>
    <version.maven.compiler>3.8.1</version.maven.compiler>
    <version.maven.war>3.2.2</version.maven.war>
    <!-- Explicitly declaring the source encoding eliminates the following
        message: -->
    <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
        resources, i.e. build is platform dependent! -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- JBoss dependency versions -->
    <version.wildfly.maven.plugin>2.0.2.Final</version.wildfly.maven.plugin>

    <!-- Define the version of the JBoss BOMs we want to import to specify
        tested stacks. -->
    <version.jboss.bom>18.0.1.Final</version.jboss.bom>

    <!-- other plugin versions -->
    <version.surefire.plugin>3.0.0-M4</version.surefire.plugin>

    <!-- kotlin -->
    <version.kotlin>1.3.70</version.kotlin>
    <kotlin.compiler.incremental>true</kotlin.compiler.incremental>
  </properties>


  <dependencyManagement>
    <dependencies>
      <!-- JBoss distributes a complete set of Java EE 7 APIs including a Bill
          of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection)
          of artifacts. We use this here so that we always get the correct versions
          of artifacts. Here we use the jboss-javaee-7.0-with-tools stack (you can
          read this as the JBoss stack of the Java EE 7 APIs, with some extras tools
          for your project, such as Arquillian for testing). -->
      <dependency>
        <groupId>org.wildfly.bom</groupId>
        <artifactId>wildfly-jakartaee8-with-tools</artifactId>
        <version>${version.jboss.bom}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>

    <!-- First declare the APIs we depend on and need for compilation. All
        of them are provided by JBoss WildFly -->

    <!-- Import the CDI API, we use provided scope as the API is included in
        JBoss WildFly -->
    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <version>2.0</version>
      <scope>provided</scope>
    </dependency>

    <!-- Import the Common Annotations API (JSR-250), we use provided scope
        as the API is included in JBoss WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.annotation</groupId>
      <artifactId>jboss-annotations-api_1.3_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the WebSocket API, we use provided scope as the API is included in
        JBoss WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.websocket</groupId>
      <artifactId>jboss-websocket-api_1.1_spec </artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the json API, we use provided scope as the API is included in
        JBoss WildFly -->
    <dependency>
      <groupId>javax.json</groupId>
      <artifactId>javax.json-api</artifactId>
      <version>1.1.4</version>
      <scope>provided</scope>
    </dependency>

    <!-- Import the JAXB API, we use provided scope as the API is included in
        JBoss WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.xml.bind</groupId>
      <artifactId>jboss-jaxb-api_2.3_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import jettison for JAXB to json serialization -->
    <dependency>
      <groupId>org.codehaus.jettison</groupId>
      <artifactId>jettison</artifactId>
    </dependency>

    <!-- Import the Servlet API, we use provided scope as the API is included in
        JBoss WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.servlet</groupId>
      <artifactId>jboss-servlet-api_4.0_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- kotlin -->
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib</artifactId>
      <version>${version.kotlin}</version>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlinx</groupId>
      <artifactId>kotlinx-coroutines-core</artifactId>
      <version>1.3.3</version>
    </dependency>
  </dependencies>

  <build>
    <!-- Maven will append the version to the finalName (which is the name
        given to the generated war, and hence the context root) -->
    <finalName>${project.artifactId}</finalName>
    <plugins>
      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <version>${version.kotlin}</version>
        <executions>
          <execution>
            <id>compile</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>${project.basedir}/src/main/java</sourceDir>
                <sourceDir>src/main/java</sourceDir>
              </sourceDirs>
            </configuration>
          </execution>
          <execution>
            <id>test-compile</id>
            <phase>test-compile</phase>
            <goals>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-allopen</artifactId>
            <version>${version.kotlin}</version>
          </dependency>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-noarg</artifactId>
            <version>${version.kotlin}</version>
          </dependency>
        </dependencies>
        <configuration>
          <compilerPlugins>
            <plugin>all-open</plugin>
            <plugin>no-arg</plugin>
          </compilerPlugins>
          <args>
            <arg>-Xallow-result-return-type</arg>
            <arg>-Xinline-classes</arg>
          </args>
          <pluginOptions>
            <option>all-open:annotation=javax.jws.WebService</option>
            <option>all-open:annotation=javax.ws.rs.Path</option>
            <option>no-arg:annotation=javax.ws.rs.Path</option>
            <option>no-arg:annotation=javax.xml.bind.annotation.XmlType</option>
            <option>no-arg:annotation=javax.websocket.server.ServerEndpoint</option>
          </pluginOptions>
          <jvmTarget>12</jvmTarget>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${version.maven.compiler}</version>
        <configuration>
          <release>${version.java}</release>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>${version.maven.war}</version>
      </plugin>
      <!-- The WildFly plugin deploys your war to a local WildFly container -->
      <!-- To use, run: mvn package wildfly:deploy -->
      <plugin>
        <groupId>org.wildfly.plugins</groupId>
        <artifactId>wildfly-maven-plugin</artifactId>
        <version>${version.wildfly.maven.plugin}</version>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.jetbrains.kotlin</groupId>
                    <artifactId>kotlin-maven-plugin</artifactId>
                    <versionRange>[${version.kotlin},)</versionRange>
                    <goals>
                      <goal>compile</goal>
                      <goal>test-compile</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
